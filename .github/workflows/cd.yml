name: n8n CD

on:
  push:
    branches: [ main ]
    paths:
      - "workflows/**"
      - "credentials/**"
      - ".github/workflows/cd.yml"
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: [self-hosted, nas-staging]

    env:
      CONTAINER_NAME: n8n_test
      WORKING_DIR: /home/node/.n8n/deployment/actions-runner/_work/n8n_test/n8n_test
      STAGING_DIR: /home/node/.n8n/deployment/cd-staging
      DEPLOY_SCRIPT: /home/node/.n8n/deployment/deploy.sh
      HEALTH_URL: https://n8n_test.aalwan.net/healthz

      VAULT_ADDR: https://vault.aalwan.net
      VAULT_ROLE: github-n8n-deployer
      VAULT_KV_MOUNT: n8n-test
      VAULT_APP_PATH: env

    steps:
      - uses: actions/checkout@v4

      - name: Run CD steps inside n8n container
        run: |
          docker exec -u root \
            -e ACTIONS_ID_TOKEN_REQUEST_URL="$ACTIONS_ID_TOKEN_REQUEST_URL" \
            -e ACTIONS_ID_TOKEN_REQUEST_TOKEN="$ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            -e VAULT_ADDR="$VAULT_ADDR" \
            -e VAULT_ROLE="$VAULT_ROLE" \
            -e VAULT_KV_MOUNT="$VAULT_KV_MOUNT" \
            -e VAULT_APP_PATH="$VAULT_APP_PATH" \
            -e STAGING_DIR="$STAGING_DIR" \
            -e WORKING_DIR="$WORKING_DIR" \
            -e DEPLOY_SCRIPT="$DEPLOY_SCRIPT" \
            -e HEALTH_URL="$HEALTH_URL" \
            $CONTAINER_NAME sh -lc '
              set -euo pipefail

              echo "[*] Ensuring dependencies with apk (curl, jq, gettext)"
              if ! command -v curl >/dev/null 2>&1; then
                apk add --no-cache curl
              fi
              if ! command -v jq >/dev/null 2>&1; then
                apk add --no-cache jq
              fi
              if ! command -v envsubst >/dev/null 2>&1; then
                apk add --no-cache gettext
              fi

              echo "[*] Requesting OIDC token from GitHub"
              OIDC_TOKEN=$(curl -sLS \
                -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=vault" | jq -r ".value")

              echo "[*] Logging into Vault with role $VAULT_ROLE"
              VAULT_TOKEN=$(curl -sLS \
                --request POST \
                --data "{\"jwt\": \"$OIDC_TOKEN\", \"role\": \"$VAULT_ROLE\"}" \
                "$VAULT_ADDR/v1/auth/jwt/login" | jq -r ".auth.client_token")

              if [ -z "${VAULT_TOKEN:-}" ] || [ "$VAULT_TOKEN" = "null" ]; then
                echo "Failed to obtain Vault token" >&2
                exit 1
              fi

              echo "[*] Fetching secrets from Vault"
              RESP=$(curl -fsS -H "X-Vault-Token: $VAULT_TOKEN" \
                "$VAULT_ADDR/v1/$VAULT_KV_MOUNT/data/$VAULT_APP_PATH")

              for KEY in $(echo "$RESP" | jq -r ".data.data | keys[]"); do
                VAL=$(echo "$RESP" | jq -r --arg k "$KEY" ".data.data[\$k]")
                echo "::add-mask::$VAL"
                export "$KEY=$VAL"
                echo "Exported $KEY"
              done

              echo "[*] Staging files"
              cp -r "$WORKING_DIR/." "$STAGING_DIR/"

              echo ".N8N:"
              echo "$(ls /home/node/.n8n)"
              echo "DEPLOYMENT DIR"
              echo "$(ls /home/node/.n8n/deployment)"
              echo "STAGING DIR"
              echo "$(ls "$STAGING_DIR")"

              envsubst < "$WORKING_DIR/credentials/credentials.json" > "$STAGING_DIR/credentials/credentials.json"

              echo "[*] Running deploy script"
              sh "$DEPLOY_SCRIPT"
            '
