name: n8n CD 🚀

on:
  push:
    branches: [ main ]
    # paths:
    #   - "workflows/**"
    #   - "credentials/**"
    #   - "tests/**"
    #   - ".github/workflows/cd.yml"
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: 🚀 Deploy to Staging
    runs-on: [self-hosted, nas-staging]

    env:
      CONTAINER_NAME: n8n_test
      STAGING_DIR: /home/node/.n8n/deployment/cd-staging
      HEALTH_URL: https://n8n_test.aalwan.net/healthz
      ENV: STAGING

      VAULT_ADDR: https://vault.aalwan.net
      VAULT_ROLE: github-n8n-deployer
      VAULT_KV_MOUNT: n8n-test
      VAULT_APP_PATH: env

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🗂️ Get changed workflow files
        id: changed
        uses: tj-actions/changed-files@v44
        # with:
        #   files: |
        #     workflows/*.json
        #     credentials/*.json
        #     tests/*.js

      - name: 📦 Stage changes into container
        run: |
          docker exec -u root $CONTAINER_NAME sh -lc '
            rm -rf "$STAGING_DIR/workflows"
            rm -rf "$STAGING_DIR/credentials"
            mkdir -p "$STAGING_DIR/workflows"
            mkdir -p "$STAGING_DIR/credentials"
          '
          docker cp .env $CONTAINER_NAME:$STAGING_DIR/.env
          for f in ${{ steps.changed.outputs.all_changed_files }}; do
            echo "📄 Copying $f"
            docker cp "$f" $CONTAINER_NAME:"$STAGING_DIR/$f"
          done

      - name: 🔐 Retrieve secrets from Vault
        run: |
          docker exec \
            -e ACTIONS_ID_TOKEN_REQUEST_TOKEN="$ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            -e ACTIONS_ID_TOKEN_REQUEST_URL="$ACTIONS_ID_TOKEN_REQUEST_URL" \
            -e VAULT_ADDR="$VAULT_ADDR" \
            -e VAULT_ROLE="$VAULT_ROLE" \
            -e VAULT_KV_MOUNT="$VAULT_KV_MOUNT" \
            -e VAULT_APP_PATH="$VAULT_APP_PATH" \
            -e STAGING_DIR="$STAGING_DIR" \
            -e ENV="$ENV" \
            -u root $CONTAINER_NAME sh -lc '
              set -euo pipefail

              echo "📣 Ensuring dependencies with apk (curl, jq, gettext)"
              if ! command -v curl >/dev/null 2>&1; then
                apk add --no-cache curl
              fi
              if ! command -v jq >/dev/null 2>&1; then
                apk add --no-cache jq
              fi
              if ! command -v envsubst >/dev/null 2>&1; then
                apk add --no-cache gettext
              fi

              echo "🔑 Requesting OIDC token from GitHub"
              OIDC_TOKEN=$(curl -sLS \
                -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=vault" | jq -r ".value")

              echo "🔐 Logging into Vault with role $VAULT_ROLE"
              VAULT_TOKEN=$(curl -sLS \
                --request POST \
                --data "{\"jwt\": \"$OIDC_TOKEN\", \"role\": \"$VAULT_ROLE\"}" \
                "$VAULT_ADDR/v1/auth/jwt/login" | jq -r ".auth.client_token")

              if [ -z "${VAULT_TOKEN:-}" ] || [ "$VAULT_TOKEN" = "null" ]; then
                echo "🔴 Failed to obtain Vault token" >&2
                exit 1
              fi

              echo "📥 Fetching secrets from Vault"
              RESP=$(curl -fsS -H "X-Vault-Token: $VAULT_TOKEN" \
                "$VAULT_ADDR/v1/$VAULT_KV_MOUNT/data/$VAULT_APP_PATH")

              for KEY in $(echo "$RESP" | jq -r ".data.data | keys[]"); do
                VAL=$(echo "$RESP" | jq -r --arg k "$KEY" ".data.data[\$k]")
                echo "::add-mask::$VAL"
                export "$KEY=$VAL"
              done
              
              echo "🧩 Substituting values into .env"
              envsubst < "$STAGING_DIR/.env" > "$STAGING_DIR/.env.tmp"

              node "$STAGING_DIR/validate_env.js" "$STAGING_DIR/.env.tmp"
              
              mv "$STAGING_DIR/.env.tmp" "$STAGING_DIR/.env"
          '

      - name: 🔑 Inject credentials
        run:  |
          docker exec -u root \
            -e STAGING_DIR="$STAGING_DIR" \
            $CONTAINER_NAME sh -lc '
              set -euo pipefail
              source "$STAGING_DIR/.env"
              
              echo "🧩 Applying envsubst to credentials"
              mkdir -p "$STAGING_DIR/credentials"
              if ls "$STAGING_DIR/credentials/"*.json >/dev/null 2>&1; then
                for f in "$STAGING_DIR/credentials/"*.json; do
                  envsubst < "$f" > "$f.tmp" && mv "$f.tmp" "$f"
                done
              fi
          '

      - name: 🚀 Deploy to staging
        id: deploy_step
        continue-on-error: true
        run: |
          docker exec -u root \
            -e N8N_STAGING_API_KEY="$N8N_STAGING_API_KEY" \
            -e BASE_URL="$BASE_URL" \
            -e HEALTH_URL="$HEALTH_URL" \
            -e STAGING_DIR="$STAGING_DIR" \
            $CONTAINER_NAME sh -lc '
              set -euo pipefail

              source "$STAGING_DIR/.env"
              
              echo "🧰 Installing tester dependencies"
              cd "$STAGING_DIR/n8n-workflow-tester"
              npm install

              echo "🧰 Installing root dependencies"
              cd "$STAGING_DIR"
              npm install

              echo "🏗️ Run Prisma migrations"
              npx prisma migrate deploy
              npx prisma generate

              echo "📦 Running deploy script"
              sh "$STAGING_DIR/deploy.sh"
            '

      - name: 🧪 Run post-deploy tests
        id: test_step
        if: steps.deploy_step.outcome == 'success'
        continue-on-error: true
        run: |
          docker exec -u root -e ENV="$ENV" -e STAGING_DIR="$STAGING_DIR" \
            $CONTAINER_NAME sh -lc '
              set -euo pipefail
              cd "$STAGING_DIR"
              source .env
              npm test
            '

      - name: 🔁 Run rollback if deploy OR tests failed
        if: steps.deploy_step.outcome == 'failure' || steps.test_step.outcome == 'failure'
        run: |
          if [ "${{ steps.deploy_step.outcome }}" = "failure" ]; then
            echo "🔴 Deployment failed — rolling back"
          elif [ "${{ steps.test_step.outcome }}" = "failure" ]; then
            echo "⚠️ Post-deployment tests failed — rolling back"
          fi
      
          docker exec -u root \
            -e N8N_STAGING_API_KEY="$N8N_STAGING_API_KEY" \
            -e BASE_URL="$BASE_URL" \
            -e HEALTH_URL="$HEALTH_URL" \
            -e STAGING_DIR="$STAGING_DIR" \
            $CONTAINER_NAME sh -lc '
              set -euo pipefail
              source "$STAGING_DIR/.env"
              sh "$STAGING_DIR/rollback.sh"
            '
          
          echo "🔵 Rollback completed. Marking job as failed."
          exit 1

      - name: 🧯 Show n8n logs on failure
        if: failure()
        run: docker logs n8n
      
      - name: 🟢 Success Summary
        if: success()
        run: |
          HEALTH_RESULT=$(curl -s -f "${HEALTH_URL}" || echo "❌ Failed to fetch health URL")
          {
            echo "## ✅ Deployment succeeded";
            echo "";
            echo "- Environment: **${ENV}**";
            echo "- Health check result:";
            echo "\`\`\`json";
            echo "${HEALTH_RESULT}";
            echo "\`\`\`";
            echo "- Changed files: \`${{ steps.changed.outputs.all_changed_files || 'n/a' }}\`";
            echo "";
            echo "🎉 All stages passed (deploy + tests).";
          } >> "$GITHUB_STEP_SUMMARY"
      
      - name: 🔴 Failure Summary
        if: failure()
        run: |
          HEALTH_RESULT=$(curl -s -f "${HEALTH_URL}" || echo "❌ Failed to fetch health URL")
          {
            echo "## ❌ Deployment failed";
            echo "";
            echo "- Environment: **${ENV}**";
            echo "- Health check result:";
            echo "\`\`\`json";
            echo "${HEALTH_RESULT}";
            echo "\`\`\`";
            echo "- Deploy step outcome: **${{ steps.deploy_step.outcome || 'n/a' }}**";
            echo "- Test step outcome: **${{ steps.test_step.outcome || 'n/a' }}**";
            echo "";
            echo "🧯 Logs attached above. Rollback executed if applicable.";
          } >> "$GITHUB_STEP_SUMMARY"
