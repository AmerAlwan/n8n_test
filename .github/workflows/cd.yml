name: n8n CD

on:
  push:
    branches: [ main ]
    paths:
      - "workflows/**"
      - "credentials/**"
      - "tests/**"
      - ".github/workflows/cd.yml"
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: [self-hosted, nas-staging]

    env:
      CONTAINER_NAME: n8n_test
      WORKING_DIR: /home/node/.n8n/deployment/actions-runner/_work/n8n_test/n8n_test
      STAGING_DIR: /home/node/.n8n/deployment/cd-staging
      DEPLOY_SCRIPT: /home/node/.n8n/deployment/deploy.sh
      HEALTH_URL: https://n8n_test.aalwan.net/healthz
      ENV: STAGING

      VAULT_ADDR: https://vault.aalwan.net
      VAULT_ROLE: github-n8n-deployer
      VAULT_KV_MOUNT: n8n-test
      VAULT_APP_PATH: env

    steps:
      - uses: actions/checkout@v4

      - name: Get changed workflow files
        id: changed
        uses: tj-actions/changed-files@v44
        with:
          files: |
            workflows/*.json

      - name: Save env variables
        run: |
          env | sed 's/^\([^=]\+\)=\(.*\)$/export \1="\2"/' > .env-docker

      - name: Copy env into container
        run: docker cp .env-docker $CONTAINER_NAME:/.env-docker

      - name: Stage changed workflows into container
        if: steps.changed.outputs.any_changed == 'true'
        run: |
          docker exec -u root $CONTAINER_NAME sh -lc 'rm -rf "$STAGING_DIR/workflows" && mkdir -p "$STAGING_DIR/workflows"'
          for f in ${{ steps.changed.outputs.all_changed_files }}; do
            echo "Copying $f"
            docker cp "$f" $CONTAINER_NAME:"$STAGING_DIR/$f"
          done
        
      - name: Installing dependencies
        run: |
          docker exec -u root \
            $CONTAINER_NAME sh -lc '
              set -euo pipefail

              source /.env-docker

              echo "[*] Ensuring dependencies with apk (curl, jq, gettext)"
              if ! command -v curl >/dev/null 2>&1; then
                apk add --no-cache curl
              fi
              if ! command -v jq >/dev/null 2>&1; then
                apk add --no-cache jq
              fi
              if ! command -v envsubst >/dev/null 2>&1; then
                apk add --no-cache gettext
              fi
          '
          
      - name: Getting secrets
        run: |
          docker exec -u root \
            $CONTAINER_NAME sh -lc '
              set -euo pipefail
              
              echo "[*] Requesting OIDC token from GitHub"
              OIDC_TOKEN=$(curl -sLS \
                -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=vault" | jq -r ".value")

              echo "[*] Logging into Vault with role $VAULT_ROLE"
              VAULT_TOKEN=$(curl -sLS \
                --request POST \
                --data "{\"jwt\": \"$OIDC_TOKEN\", \"role\": \"$VAULT_ROLE\"}" \
                "$VAULT_ADDR/v1/auth/jwt/login" | jq -r ".auth.client_token")

              if [ -z "${VAULT_TOKEN:-}" ] || [ "$VAULT_TOKEN" = "null" ]; then
                echo "Failed to obtain Vault token" >&2
                exit 1
              fi

              echo "[*] Fetching secrets from Vault"
              RESP=$(curl -fsS -H "X-Vault-Token: $VAULT_TOKEN" \
                "$VAULT_ADDR/v1/$VAULT_KV_MOUNT/data/$VAULT_APP_PATH")

              for KEY in $(echo "$RESP" | jq -r ".data.data | keys[]"); do
                VAL=$(echo "$RESP" | jq -r --arg k "$KEY" ".data.data[\$k]")
                echo "::add-mask::$VAL"
                export "$KEY=$VAL"
                echo "Exported $KEY"
              done
          '
      - name: Deploy to staging
        run: |
          docker exec -u root \
            $CONTAINER_NAME sh -lc '
              set -euo pipefail

              echo "[*] Staging files"
              cp -rT "$WORKING_DIR/." "$STAGING_DIR/"

              echo "[*] Applying envsubst to credentials (*.json)"
              if ls "$WORKING_DIR/credentials/"*.json >/dev/null 2>&1; then
                for f in "$WORKING_DIR/credentials/"*.json; do
                  b=$(basename "$f")
                  envsubst < "$f" > "$STAGING_DIR/credentials/$b"
                done
              fi

              echo "[*] Running deploy script"
              sh "$DEPLOY_SCRIPT"
              
              echo "[*] Installing dependencies"

              cd "$STAGING_DIR/n8n-workflow-tester"
              npm install
              
              cd "$STAGING_DIR"
              npm install

              echo "[*] Run Prisma migrations"
              npx prisma migrate deploy
              npx prisma generate

              echo "[*} Running tests"
              npm test
          '
