name: n8n CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ${{ vars.POSTGRES_USER }} -d ${{ vars.POSTGRES_DB }}"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    env:
      POSTGRES_ACCOUNT_HOST: ${{ vars.POSTGRES_ACCOUNT_HOST }}
      POSTGRES_ACCOUNT_DATABASE: ${{ vars.POSTGRES_DB }}
      POSTGRES_ACCOUNT_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_ACCOUNT_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
      POSTGRES_ACCOUNT_PORT: ${{ vars.POSTGRES_ACCOUNT_PORT }}
      WORKFLOWS_PATH: ${{ vars.WORKFLOWS_PATH }}
      CREDS_PATH: ${{ vars.CREDS_PATH }}
      WEBHOOK_URL: ${{ vars.WEBHOOK_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Patch credentials.json with env values
        run: |
          cp credentials/credentials.json credentials/credentials.patched.json
          sed -i "s/\$(POSTGRES_ACCOUNT_HOST)/${{ vars.POSTGRES_ACCOUNT_HOST }}/g" credentials/credentials.patched.json
          sed -i "s/\$(POSTGRES_ACCOUNT_DATABASE)/${{ vars.POSTGRES_DB }}/g" credentials/credentials.patched.json
          sed -i "s/\$(POSTGRES_ACCOUNT_USER)/${{ vars.POSTGRES_USER }}/g" credentials/credentials.patched.json
          sed -i "s/\$(POSTGRES_ACCOUNT_PASSWORD)/${{ vars.POSTGRES_PASSWORD }}/g" credentials/credentials.patched.json
          sed -i "s/\$(POSTGRES_ACCOUNT_PORT)/${{ vars.POSTGRES_ACCOUNT_PORT }}/g" credentials/credentials.patched.json

      - name: Start n8n Docker container
        run: |
          docker pull n8nio/n8n:latest
          docker run -d \
            --name n8n-test \
            -e DB_TYPE=postgresdb \
            -e DB_POSTGRESDB_HOST=host.docker.internal \
            -e DB_POSTGRESDB_DATABASE=${{ vars.POSTGRES_DB }} \
            -e DB_POSTGRESDB_USER=${{ vars.POSTGRES_USER }} \
            -e DB_POSTGRESDB_PASSWORD=${{ vars.POSTGRES_PASSWORD }} \
            -e N8N_BASIC_AUTH_ACTIVE=false \
            -e N8N_HOST=localhost \
            -e N8N_PORT=5678 \
            -e N8N_PROTOCOL=http \
            -v ${{ github.workspace }}/${{ vars.WORKFLOWS_PATH }}:/home/node/.n8n/workflows \
            -v ${{ github.workspace }}/${{ vars.CREDS_PATH }}:/home/node/.n8n/credentials \
            -p 5678:5678 \
            --health-cmd="curl --fail http://localhost:5678/healthz || exit 1" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=15 \
            n8nio/n8n:latest

      - name: Wait for n8n to be healthy
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:5678/healthz | grep -q "ok"; then
              echo "n8n is healthy"
              exit 0
            fi
            echo "Waiting for n8n to be healthy..."
            sleep 5
          done
          echo "n8n did not become healthy in time"
          docker logs n8n-test
          exit 1

      - name: Import credentials via n8n CLI
        run: |
          docker exec n8n-test n8n import:credentials --input /home/node/.n8n/credentials/credentials.patched.json --overwrite

      - name: Import workflow via n8n CLI
        run: |
          docker exec n8n-test n8n import:workflow --input /home/node/.n8n/workflows/YAHdeeXkYbwOOQJk.json --overwrite

      - name: Run Jest tests
        env:
          N8N_CLI: docker exec n8n-test n8n
        run: npm test

      - name: Show n8n logs on failure
        if: failure()
        run: docker logs n8n-test
